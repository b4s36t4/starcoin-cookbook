"use strict";(self.webpackChunkstarcoin_cookbook=self.webpackChunkstarcoin_cookbook||[]).push([[9550],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),u=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||s[m]||a;return n?o.createElement(f,c(c({ref:t},p),{},{components:n})):o.createElement(f,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var u=2;u<a;u++)c[u]=n[u];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5552:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return c},default:function(){return s},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var o=n(3117),r=(n(7294),n(3905));const a={},c="Deploy your first Move contract",l={unversionedId:"move/deploy-first-move-contract",id:"move/deploy-first-move-contract",title:"Deploy your first Move contract",description:"This article guides you on how to compile and deploy a Move contract to the starcoin blockchain.",source:"@site/docs/03-move/06-deploy-first-move-contract.md",sourceDirName:"03-move",slug:"/move/deploy-first-move-contract",permalink:"/starcoin-cookbook/docs/move/deploy-first-move-contract",draft:!1,editUrl:"https://github.com/starcoinorg/starcoin-cookbook/edit/main/docs/03-move/06-deploy-first-move-contract.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Oracle protocol",permalink:"/starcoin-cookbook/docs/move/starcoin-framework/oracle"},next:{title:"Interacting with the contract by CLI",permalink:"/starcoin-cookbook/docs/move/interacting-with-the-contract"}},i={},u=[],p={toc:u};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploy-your-first-move-contract"},"Deploy your first Move contract"),(0,r.kt)("p",null,"This article guides you on how to compile and deploy a Move contract to the starcoin blockchain."),(0,r.kt)("p",null,"Move is a new programming language developed to provide a safe and programmable foundation for the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deim/diem"},"Diem")," Blockchain. Starcoin Blockchain also support Move language to write smart contract."),(0,r.kt)("p",null,"In this article, you will learn:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"How to setup Move develop folder and config."),(0,r.kt)("li",{parentName:"ul"},"How to package(or compile) a Move module."),(0,r.kt)("li",{parentName:"ul"},"How to deploy the compiled binary to the starcoin blockchain.")),(0,r.kt)("p",null,"First start a dev network as described in ",(0,r.kt)("a",{parentName:"p",href:"/starcoin-cookbook/docs/getting-started/setup/dev-network"},"How to set up a local dev network"),", get some dev net test coin, and unlock your account. Here assume your account address is 0xb19b07b76f00a8df445368a91c0547cc ."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"starcoin% dev get-coin 0xb19b07b76f00a8df445368a91c0547cc\nstarcoin% account unlock 0xb19b07b76f00a8df445368a91c0547cc -p my-pass\n")),(0,r.kt)("p",null,"Then, let's get started!"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Assume you are working under folder ",(0,r.kt)("inlineCode",{parentName:"li"},"/your/dev/path/my-counter/"),", setup your develop folder with the tree below. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 Move.toml\n\u2514\u2500\u2500 sources\n    \u2514\u2500\u2500 MyCounter.move\n")),(0,r.kt)("p",null,"The file ",(0,r.kt)("inlineCode",{parentName:"p"},"Move.toml")," and folder ",(0,r.kt)("inlineCode",{parentName:"p"},"sources")," are required by the mpm package tool, which should not be modified. All the Move modules are putting under ",(0,r.kt)("inlineCode",{parentName:"p"},"sources/")," folder. Here say a simple module: MyCounter."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Code your Move module. The source file is at ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/starcoinorg/starcoin-cookbook/blob/main/examples/my-counter/sources/MyCounter.move"},"my-counter"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"module MyCounter::MyCounter {\n     use StarcoinFramework::Signer;\n\n     struct Counter has key, store {\n        value:u64,\n     }\n     public fun init(account: &signer){\n        move_to(account, Counter{value:0});\n     }\n     public fun incr(account: &signer) acquires Counter {\n        let counter = borrow_global_mut<Counter>(Signer::address_of(account));\n        counter.value = counter.value + 1;\n     }\n\n     public(script) fun init_counter(account: signer){\n        Self::init(&account)\n     }\n\n     public(script) fun incr_counter(account: signer)  acquires Counter {\n        Self::incr(&account)\n     }\n}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Compile the module.  ")),(0,r.kt)("p",null,"Change the address of the module:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"edit ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/starcoinorg/starcoin-cookbook/blob/main/examples/my-counter/Move.toml"},"Move.toml")),(0,r.kt)("li",{parentName:"ul"},"MyCounter = \u201c0xABCDE\u201d to MyCounter = \u201c0xb19b07b76f00a8df445368a91c0547cc\u201d")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A Move module should be declared with ",(0,r.kt)("inlineCode",{parentName:"p"},"module <Account>::<ModuleName> {"),", and you must assign the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"Account")," you account address in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Move.toml")," file. In this example, it's the first ",(0,r.kt)("inlineCode",{parentName:"p"},"MyCounter")," in the first line.")),(0,r.kt)("p",null,"Then, in console, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ mpm release\n\nPackaging Modules:\n         0xb19b07b76f00a8df445368a91c0547cc::MyCounter\nRelease done: release/my_counter.v0.0.1.blob, package hash: 0xa7e3c02c102c85708c6fa8c9f84064d09cf530b9581278aa92568d67131c3b6d\n")),(0,r.kt)("p",null,"It will compile the module, you will get the binary package at ",(0,r.kt)("inlineCode",{parentName:"p"},"release/my_counter.v0.0.1.blob"),"."),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Deploy to blockchain")),(0,r.kt)("p",null,"There are two CLI tools to deploy binary package to chain: ",(0,r.kt)("inlineCode",{parentName:"p"},"mpm deploy")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"starcoin dev deploy"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"mpm deploy")),(0,r.kt)("p",null,"Account provider is need to signature the deployment transaction. There are three types of account provider for ",(0,r.kt)("inlineCode",{parentName:"p"},"mpm deploy")," command:\n1) local-account-dir; 2) secret-file; 3) environment variable.  "),(0,r.kt)("p",null,"The commands corresponding to the three account provider are as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ mpm deploy --rpc ws://127.0.0.1:9871 --local-account-dir /your/local/account/dir --password xxxxx /your/dev/path/my-counter/release/my_counter.v0.0.1.blob\n\n$ mpm deploy --rpc ws://127.0.0.1:9871 --secret-file /your/secret/file /your/dev/path/my-counter/release/my_counter.v0.0.1.blob\n\n$ mpm deploy --rpc ws://127.0.0.1:9871 --from-env /your/dev/path/my-counter/release/my_counter.v0.0.1.blob\n")),(0,r.kt)("p",null,"You can change ",(0,r.kt)("inlineCode",{parentName:"p"},"--rpc")," option to the Barnard's or Mainnet's RPC address to deploy package to the corresponding chain."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"secret-file")," is a local file storing only the private key content, without any other prefix or suffix."),(0,r.kt)("p",null,"The key of environment variable is ",(0,r.kt)("inlineCode",{parentName:"p"},"STARCOIN_PRIVATE_KEY"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"starcoin dev deploy ")),(0,r.kt)("p",null,"In starcoin console mode, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'starcoin% dev deploy /your/dev/path/my-counter/release/my_counter.v0.0.1.blob -s 0xb19b07b76f00a8df445368a91c0547cc -b\ntxn 0xeb055894f0c4440608246825c238a36683a8a0ad57144e905a12398a02ce806b submitted.\n{\n  "ok": {\n    "dry_run_output": {\n      "events": [],\n      "explained_status": "Executed",\n      "gas_used": "7800",\n      "status": "Executed",\n      "write_set": [\n        {\n          "access_path": "0x00000000000000000000000000000001/1/0x00000000000000000000000000000001::TransactionFee::TransactionFee<0x00000000000000000000000000000001::STC::STC>",\n          "action": "Value",\n          "value": {\n            "Resource": {\n              "json": {\n                "fee": {\n                  "value": 292331\n                }\n              },\n              "raw": "0xeb750400000000000000000000000000"\n            }\n          }\n        },\n  .....\n  ....\n}\n')))}s.isMDXComponent=!0}}]);